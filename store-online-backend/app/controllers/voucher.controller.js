const mongoose = require("mongoose");
const {
    NotFoundError,
    BadRequestError,
    CreateDatabaseError,
} = require("../helpers/errorHandler");
const voucherModel = require("../models/voucher.model");
const { generateCode } = require("../helpers");

const getVouchers = async (req, res) => {
    /** get limit
     * if limit undefined, set limit 0
     */
    let { limit } = req.query;
    limit = limit ? +limit : 0;

    // if limit exists, check type
    if (limit && isNaN(limit)) throw new BadRequestError();

    // get params query
    let { searchString, page } = req.query;

    /** check page
     * if page undefined, page = 1
     */
    page = page ? +page : 1;

    // get skip value
    const skip = (page - 1) * limit;

    /** get vouchers - sorted by update time
     * queryVouchers is limit products with conditions
     * countVouchers is number of all products with conditions
     */
    const queryVouchers = voucherModel.find().skip(skip).limit(limit);
    const countVouchers = voucherModel.find();

    // search name condition
    if (searchString) {
        const regex = new RegExp(searchString, "i");
        queryVouchers.where(
            !isNaN(searchString)
                ? { discount: Number(searchString) }
                : { code: regex }
        );
        countVouchers.where(
            !isNaN(searchString)
                ? { discount: Number(searchString) }
                : { code: regex }
        );
    }

    // get total number of voucher
    const totalVoucher = await countVouchers.countDocuments().exec();
    // get voucher
    const vouchers = await queryVouchers.lean().exec();
    // check voucher error
    if (!vouchers) throw new NotFoundError("Cannot load categories");

    // return vouchers and total vouchers
    return res.status(200).json({
        status: "success",
        metadata: {
            vouchers,
            totalVoucher,
        },
    });
};

const getVoucherByCode = async (req, res) => {
    // get code
    const code = req.params.code;
    // check code null
    if (!code) throw new BadRequestError("code not valid !");

    /** get voucher by code
     *  where available status
     */
    const voucher = await voucherModel
        .findOne({ code })
        .where({ status: "available" });
    // check voucher
    if (!voucher)
        return res.status(200).json({
            status: "error",
        });

    // return voucher
    return res.status(200).json({
        status: "success",
        metadata: {
            voucher,
        },
    });
};

const createVoucher = async (req, res) => {
    // get data request
    const { discount } = req.body;
    // check null
    if (!discount) throw new BadRequestError("discount is required");

    /** create a new voucher
     *  discount code is 8 characters, auto generated by code
     *  */
    const voucher = await voucherModel.create({
        discount,
        code: generateCode(),
    });
    // check voucher error
    if (!voucher) throw new CreateDatabaseError();

    // return created voucher
    return res.status(200).json({
        status: "success",
        metadata: {
            voucher,
        },
    });
};

const updateVoucherById = async (req, res) => {
    // get _id
    const id = req.params.id;
    // check valid
    if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new BadRequestError("Id not valid !");
    }

    // get data request
    const { status } = req.body;
    // check null
    if (!status) throw new BadRequestError("status is required");

    // update voucher
    const update = await voucherModel.findByIdAndUpdate(
        id,
        { status },
        { new: true }
    );
    // check error
    if (!update) throw new CreateDatabaseError();

    // return updated voucher
    return res.status(200).json({
        status: "success",
        metadata: {
            status: update,
        },
    });
};

const deleteVoucherById = async (req, res) => {
    // get _id
    const id = req.params.id;
    // check valid
    if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new BadRequestError("Id not valid !");
    }

    // soft delete voucher
    const result = await voucherModel.findByIdAndDelete(id);
    // check error
    if (!result) throw new CreateDatabaseError();

    // return delete successfull
    return res.status(200).json({
        status: "success",
    });
};

module.exports = {
    getVouchers,
    getVoucherByCode,
    createVoucher,
    updateVoucherById,
    deleteVoucherById,
};
